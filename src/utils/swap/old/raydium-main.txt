import { RaydiumSwap } from "./raydium-swap";
import { CONFIG } from "./raydium-config";
import {
  PublicKey,
  LAMPORTS_PER_SOL,
  Transaction,
  VersionedTransaction,
} from "@solana/web3.js";

async function getTokenBalance(
  raydiumSwap: RaydiumSwap,
  mint: string
): Promise<number> {
  const userTokenAccounts = await raydiumSwap.getOwnerTokenAccounts();
  const tokenAccount = userTokenAccounts.find((account) =>
    account.accountInfo.mint.equals(new PublicKey(mint))
  );
  if (tokenAccount) {
    const balance = await raydiumSwap.connection.getTokenAccountBalance(
      tokenAccount.pubkey
    );
    return balance.value.uiAmount || 0;
  }
  return 0;
}

export async function solanaSwap({
  wallet, // Connected wallet
  connection, // Solana connection
  baseMint, // Base token mint address (e.g., SOL)
  quoteMint, // Quote token mint address (e.g., BONK)
  amount, // Amount to swap (in lamports for SOL or token units)
  slippage, // Slippage tolerance (percentage)
  useVersionedTransaction = true, // Flag for using versioned transactions
  executeSwap = true, // Flag for executing the swap or just simulating
  getPriorityFee, // Function to get the current priority fee (custom)
}: {
  wallet: any;
  connection: any;
  baseMint: string;
  quoteMint: string;
  amount: number;
  slippage: number;
  useVersionedTransaction?: boolean;
  executeSwap?: boolean;
  getPriorityFee: () => Promise<number>;
}) {
  console.log("Starting swap process...");

  // Initialize the RaydiumSwap object with the connection and wallet
  const raydiumSwap = new RaydiumSwap(connection, wallet.secretKey);

  // Load pool keys for the swap
  await raydiumSwap.loadPoolKeys();

  let poolInfo =
    raydiumSwap.findPoolInfoForTokens(baseMint, quoteMint) ||
    (await raydiumSwap.findRaydiumPoolInfo(baseMint, quoteMint));

  if (!poolInfo) {
    throw new Error("Couldn't find the pool info");
  }

  // Create a wrapped SOL account instruction if needed (e.g., for SOL)
  await raydiumSwap.createWrappedSolAccountInstruction(amount);

  console.log("Fetching current priority fee...");
  const priorityFee = await getPriorityFee();
  console.log(`Current priority fee: ${priorityFee} SOL`);

  console.log("Creating swap transaction...");
  const swapTx = await raydiumSwap.getSwapTransaction(
    quoteMint,
    amount,
    poolInfo,
    useVersionedTransaction,
    slippage
  );

  console.log(`Using priority fee: ${priorityFee} SOL`);
  console.log(
    `Transaction signed with payer: ${raydiumSwap.wallet.publicKey.toBase58()}`
  );

  console.log(`Swapping ${amount} SOL for ${quoteMint}`);

  if (executeSwap) {
    try {
      let txid: string;
      if (useVersionedTransaction) {
        if (!(swapTx instanceof VersionedTransaction)) {
          throw new Error(
            "Expected a VersionedTransaction but received a different type"
          );
        }
        const latestBlockhash = await connection.getLatestBlockhash();
        txid = await raydiumSwap.sendVersionedTransaction(
          swapTx,
          latestBlockhash.blockhash,
          latestBlockhash.lastValidBlockHeight
        );
      } else {
        if (!(swapTx instanceof Transaction)) {
          throw new Error(
            "Expected a Transaction but received a different type"
          );
        }
        txid = await raydiumSwap.sendLegacyTransaction(swapTx);
      }
      console.log(`Transaction sent, signature: ${txid}`);
      console.log(
        `Transaction executed: https://explorer.solana.com/tx/${txid}`
      );

      console.log("Transaction confirmed successfully");

      // Fetch and display token balances
      const solBalance =
        (await connection.getBalance(wallet.publicKey)) / LAMPORTS_PER_SOL;
      const quoteBalance = await getTokenBalance(raydiumSwap, quoteMint);

      console.log("\nToken Balances After Swap:");
      console.log(`SOL: ${solBalance.toFixed(6)} SOL`);
      console.log(`${quoteMint}: ${quoteBalance.toFixed(2)} ${quoteMint}`);
    } catch (error) {
      console.error("Error executing transaction:", error);
    }
  } else {
    console.log("Simulating transaction (dry run)");
    try {
      let simulationResult;
      if (useVersionedTransaction) {
        if (!(swapTx instanceof VersionedTransaction)) {
          throw new Error(
            "Expected a VersionedTransaction but received a different type"
          );
        }
        simulationResult = await raydiumSwap.simulateVersionedTransaction(
          swapTx
        );
      } else {
        if (!(swapTx instanceof Transaction)) {
          throw new Error(
            "Expected a Transaction but received a different type"
          );
        }
        simulationResult = await raydiumSwap.simulateLegacyTransaction(swapTx);
      }
      console.log("Simulation successful");
      console.log("Simulated transaction details:");
      console.log(`Logs:`, simulationResult.logs);
      console.log(`Units consumed:`, simulationResult.unitsConsumed);
      if (simulationResult.returnData) {
        console.log(`Return data:`, simulationResult.returnData);
      }
    } catch (error) {
      console.error("Error simulating transaction:", error);
    }
  }
}

// swap().catch((error) => {
//   console.error("An error occurred during the swap process:");
//   console.error(error);
// });
